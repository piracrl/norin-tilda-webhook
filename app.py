import os
import sqlite3
from flask import Flask, request
import telebot
import pytz
from datetime import datetime
import json
from telebot import types

TOKEN = os.getenv("TELEGRAM_TOKEN")  
CHAT_ID = os.getenv("CHAT_ID")  
WEBHOOK_URL = f"https://bot.nor1n-store.ru/bot_webhook"

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# --- –±–∞–∑–∞ SQLite ---
DB_PATH = "orders.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id TEXT PRIMARY KEY,
            username TEXT,
            products TEXT,
            amount TEXT,
            fio TEXT,
            email TEXT,
            phone TEXT,
            city TEXT,
            address TEXT,
            status TEXT
        )
    """)
    conn.commit()
    conn.close()

def save_order(order_id, username, products, amount, fio, email, phone, city, address):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        INSERT OR REPLACE INTO orders (id, username, products, amount, fio, email, phone, city, address, status)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (order_id, username, products, amount, fio, email, phone, city, address, "pending"))
    conn.commit()
    conn.close()

def get_order_by_username(username):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT * FROM orders WHERE username = ?", (username,))
    row = c.fetchone()
    conn.close()
    return row

def update_order_status(order_id, status):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE orders SET status = ? WHERE id = ?", (status, order_id))
    conn.commit()
    conn.close()

# --- –í–µ–±—Ö—É–∫ –¥–ª—è Telegram ---
@app.route(f"/bot_webhook", methods=["POST"])
def telegram_webhook():
    json_str = request.get_data(as_text=True)
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

# --- –í–µ–±—Ö—É–∫ –¥–ª—è –¢–∏–ª—å–¥—ã ---
@app.route('/tilda_order', methods=['POST'])
def tilda_order():
    try:
        data = request.form.to_dict()  # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã –¢–∏–ª—å–¥—ã
        print("FORM DATA:", data)  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –ª–æ–≥–∞—Ö

        # –î–æ—Å—Ç–∞—ë–º –ø–æ–ª—è
        payment_data = json.loads(data.get("payment", "{}"))

        order_id = payment_data.get("orderid", "‚Äî")
        products = payment_data.get("products", [])
        amount = payment_data.get("amount", "‚Äî")

        # –∫—Ä–∞—Å–∏–≤–æ —Å–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
        products_text = "\n".join(products) if products else "‚Äî"

        # –í—Ä–µ–º—è –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É
        tz = pytz.timezone("Asia/Yekaterinburg")
        now = datetime.now(tz).strftime("%d.%m.%Y %H:%M")

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        fio = data.get("name", "‚Äî")
        email = data.get("email", "‚Äî")
        phone = data.get("phone", "‚Äî")
        address = data.get("address", "‚Äî")
        city = data.get("city", "‚Äî")
        tg_username = data.get("telegram", "")
        tg_link = f"@{tg_username}" if tg_username else "‚Äî"

        username = tg_username or phone or email  # –∫–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –ø–æ telegram username
        save_order(order_id, tg_username, products_text, amount, fio, email, phone, city, address)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞ NOR1N STORE\n\n"
            f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
            f"üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {now}\n\n"
            f"–¢–æ–≤–∞—Ä—ã:\n{products_text}\n\n"
            f"C—É–º–º–∞: {amount} —Ä—É–±\n\n"
            f"–§–ò–û: {fio}\n"
            f"Email: {email}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            f"Telegram: {tg_link}"
        )

        #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É
        bot.send_message(CHAT_ID, message)
        return "ok"
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        return "error", 500

# –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ö–õ–ò–ï–ù–¢–ê
@bot.message_handler(commands=["start"])
def start(message):
    username = message.from_user.username
    order = get_order_by_username(username) if username else None

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if order:
        order_id, username, products, amount, fio, email, phone, city, address, status = order
        kb.add(f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã ({amount} ‚ÇΩ)")
        kb.add("üìã –ú–æ–π –∑–∞–∫–∞–∑", "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
        kb.add("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")

        order_msg = (
            f"üì¶ –ú—ã –Ω–∞—à–ª–∏ —Ç–≤–æ–π –∑–∞–∫–∞–∑!\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
            f"–¢–æ–≤–∞—Ä—ã:\n{products}\n\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±\n\n"
            f"–§–ò–û: {fio}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ê–¥—Ä–µ—Å: {city}, {address}\n"
            f"Email: {email}\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Å—Ö–æ–¥–∏—Ç—Å—è ‚Äî –Ω–∞–ø–∏—à–∏ –Ω–∞–º."
        )
        bot.send_message(message.chat.id, order_msg, reply_markup=kb)
    else:
        kb.add("üìã –ú–æ–π –∑–∞–∫–∞–∑")
        kb.add("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")

        bot.send_message(
            message.chat.id,
            "–ü—Ä–∏–≤–µ—Ç üëã\n–Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ Nor1n Store.\n\n"
            "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, –æ–ø–ª–∞—Ç–µ –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
            reply_markup=kb
        )

@bot.message_handler(func=lambda msg: msg.text == "üìã –ú–æ–π –∑–∞–∫–∞–∑")
def my_order(message):
    username = message.from_user.username or str(message.chat.id)
    order = get_order_by_username(username) if username else None

    if order:
        order_id, username, products, amount, fio, email, phone, city, address, status = order
        status_text = "‚úÖ –û–ø–ª–∞—á–µ–Ω" if status == "paid" else "‚åõ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
        bot.send_message(
            message.chat.id,
            f"–¢–≤–æ–π –∑–∞–∫–∞–∑:\n\n"
            f"–ù–æ–º–µ—Ä: {order_id}\n"
            f"{products}\n"
            f"–°—É–º–º–∞: {amount} —Ä—É–±\n"
            f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {city}, {address}"
        )
    else:
        bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω üòï")

@bot.message_handler(func=lambda msg: msg.text.startswith("üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã"))
def payment_info(message):
    bot.send_message(
        message.chat.id,
        "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n–¢-–ë–∞–Ω–∫\n2200 7007 4343 1685\n–°–∞–≤–µ–ª–∏–π –ü."
    )

@bot.message_handler(func=lambda msg: msg.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
def payment_confirmed(message):
    username = message.from_user.username
    order = get_order_by_username(username) if username else None

    if order:
        order_id, username, products, amount, fio, email, phone, city, address, status = order
        update_order_status(order_id, "paid")
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! üôå –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ, –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ—ë.")

        notify = (
            "üí∏ –ö–ª–∏–µ–Ω—Ç —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ!\n\n"
            f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
            f"üë§ Telegram: @{username}\n"
            f"üí≥ –°—É–º–º–∞: {amount} —Ä—É–±"
        )
        bot.send_message(CHAT_ID, notify)
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –Ω–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–≤–æ—ë–º –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É @nor1nstore_buy.")

@bot.message_handler(func=lambda msg: msg.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
def contact_manager(message):
    bot.send_message(message.chat.id, "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ —Ç—É—Ç: @nor1nstore_buy")

if __name__ == "__main__":
    init_db()
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=10000)