import os
from flask import Flask, request
import telebot
import pytz
from datetime import datetime
import json
from telebot import types

TOKEN = os.getenv("BOT_TOKEN")  # —Å–æ—Ö—Ä–∞–Ω–∏ —Ç–æ–∫–µ–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHAT_ID = os.getenv("CHAT_ID")  # –∏ chat_id —Ç–æ–∂–µ
bot = telebot.TeleBot(TOKEN)

app = Flask(__name__)

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ (–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
orders = {}

@app.route('/tilda_order', methods=['POST'])
def tilda_order():
    try:
        data = request.form.to_dict()  # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã –¢–∏–ª—å–¥—ã
        print("FORM DATA:", data)  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –ª–æ–≥–∞—Ö

        # –î–æ—Å—Ç–∞—ë–º –ø–æ–ª—è
        payment_data = json.loads(data.get("payment", "{}"))

        order_id = payment_data.get("orderid", "‚Äî")
        products = payment_data.get("products", [])
        amount = payment_data.get("amount", "‚Äî")

        # –∫—Ä–∞—Å–∏–≤–æ —Å–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
        products_text = "\n".join(products) if products else "‚Äî"

        # –í—Ä–µ–º—è –ø–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—É
        tz = pytz.timezone("Asia/Yekaterinburg")
        now = datetime.now(tz).strftime("%d.%m.%Y %H:%M")

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        fio = data.get("name", "‚Äî")
        email = data.get("email", "‚Äî")
        phone = data.get("phone", "‚Äî")
        address = data.get("address", "‚Äî")
        city = data.get("city", "‚Äî")
        tg_username = data.get("telegram", "")
        tg_link = f"@{tg_username}" if tg_username else "‚Äî"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –ø–æ telegram username
        orders[tg_username] = {
            "id": order_id,
            "products": products,
            "amount": amount,
            "fio": data.get("name", ""),
            "email": data.get("email", ""),
            "phone": data.get("phone", ""),
            "city": data.get("city", ""),
            "address": data.get("address", ""),
        }

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å —Å–∞–π—Ç–∞ NOR1N STORE\n\n"
            f"üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
            f"üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {now}\n\n"
            f"–¢–æ–≤–∞—Ä—ã:\n{products_text}\n\n"
            f"C—É–º–º–∞: {amount} —Ä—É–±\n\n"
            f"–§–ò–û: {fio}\n"
            f"Email: {email}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            f"Telegram: {tg_link}"
        )

        bot.send_message(CHAT_ID, message)
        return "ok"
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)
        return "error", 500

# –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ö–õ–ò–ï–ù–¢–ê
@bot.message_handler(commands=["start"])
def start(message):
    username = message.from_user.username
    if username in orders:
        order = orders[username]

        #–ö–Ω–æ–ø–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üìë –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã")
        btn2 = types.KeyboardButton("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
        btn3 = types.KeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
        markup.add(btn1, btn2, btn3)

        bot.send_message(
            message.chat.id,
            f"""–ü—Ä–∏–≤–µ—Ç! –ú—ã –Ω–∞—à–ª–∏ —Ç–≤–æ–π –∑–∞–∫–∞–∑ üéâ

üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order['id']}
üëï –¢–æ–≤–∞—Ä—ã: {chr(10).join(order['products'])}
üí≥ –°—É–º–º–∞: {order['amount']} —Ä—É–±

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:""",
            reply_markup=markup
            )
    else:
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Ç–æ–±–æ–π –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è üôÇ")

# –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö
@bot.message_handler(func=lambda m: m.text == "üìë –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã")
def payment_info(message):
    username = message.from_user.username
    order = orders.get(username)
    if order:
        bot.send_message(message.chat.id, f"""–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ ‚Ññ{order['id']}:

üí≥ 2202 2020 3030 4040
–ü–æ–ª—É—á–∞—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤
–°—É–º–º–∞: {order['amount']} —Ä—É–±

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª""")
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

@bot.message_handler(func=lambda m: m.text == "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
def contact_manager(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ @username_–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")


@bot.message_handler(func=lambda m: m.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
def paid(message):
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ —Å–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ–º—Å—è üôå")


# –í–µ–±—Ö—É–∫ –¥–ª—è Telegram
@app.route("/" + TOKEN, methods=["POST"])
def getMessage():
    json_str = request.stream.read().decode("UTF-8")
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url="https://norin-tilda-webhook.onrender.com/" + TOKEN)
    return "!", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)