import os
import json
from datetime import datetime

import pytz
import telebot
from telebot import types
from flask import Flask, request
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate

# --- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TELEGRAM_TOKEN")  
CHAT_ID = os.getenv("CHAT_ID")  
WEBHOOK_URL = f"https://bot.nor1n-store.ru/bot_webhook"
PROJECT_ID = "13927899"

if not TOKEN or not CHAT_ID or not PROJECT_ID:
    raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN, CHAT_ID –∏–ª–∏ PROJECT_ID")

# --- Flask / DB ---
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///orders.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
migrate = Migrate(app, db)

# --- –ú–æ–¥–µ–ª—å –∑–∞–∫–∞–∑–∞ ---
class Order(db.Model):
    __tablename__ = "orders"
    id = db.Column(db.Integer, primary_key=True)
    order_id = db.Column(db.String(50))
    lead_id = db.Column(db.String(50))
    products = db.Column(db.Text)
    amount = db.Column(db.String(20))
    fio = db.Column(db.String(200))
    email = db.Column(db.String(100))
    phone = db.Column(db.String(50))
    city = db.Column(db.String(100))
    address = db.Column(db.String(200))
    telegram = db.Column(db.String(50))
    paid = db.Column(db.Boolean, default=False)

bot = telebot.TeleBot(TOKEN)

# --- –í–µ–±—Ö—É–∫ –¥–ª—è Telegram ---
@app.route(f"/bot_webhook", methods=["POST"])
def telegram_webhook():
    json_str = request.get_data(as_text=True)
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

# --- –í–µ–±—Ö—É–∫ –¥–ª—è –¢–∏–ª—å–¥—ã ---
@app.route('/tilda_order', methods=['POST'])
def tilda_order():
    try:
        data = request.form.to_dict()
        payment_data = json.loads(data.get("payment", "{}"))

        order_id = payment_data.get("orderid", "‚Äî")
        lead_id = payment_data.get("tranid", "")
        products = payment_data.get("products", [])
        amount = payment_data.get("amount", "‚Äî")

        products_text = "\n".join(products) if products else "‚Äî"

        tz = pytz.timezone("Asia/Yekaterinburg")
        now = datetime.now(tz).strftime("%d.%m.%Y %H:%M")

        fio = data.get("name", "‚Äî")
        email = data.get("email", "‚Äî")
        phone = data.get("phone", "‚Äî")
        address = data.get("address", "‚Äî")
        city = data.get("city", "‚Äî")
        tg_username = data.get("telegram", "")
        tg_link = f"@{tg_username}" if tg_username else "‚Äî"

        with app.app_context():
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ —Å lead_id –∏ order_id
            order = Order(
                order_id=order_id,
                lead_id=lead_id,
                products=products_text,
                amount=str(amount),
                fio=fio,
                email=email,
                phone=phone,
                city=city,
                address=address,
                telegram=tg_username or None
            )
            db.session.add(order)
            db.session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"üì¶ –ù–æ–º–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {order_id}\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –¢–∏–ª—å–¥–µ: {lead_id}\n"
            f"üïí –î–∞—Ç–∞: {now}\n\n"
            f"–¢–æ–≤–∞—Ä—ã:\n{products_text}\n\n"
            f"C—É–º–º–∞: {amount} —Ä—É–±\n\n"
            f"–ó–∞—è–≤–∫–∞ –≤ –¢–∏–ª—å–¥–µ:\n"
            f"https://tilda.ru/projects/leads/?projectid={PROJECT_ID}&id={PROJECT_ID}:{lead_id}"
        )

        #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É
        bot.send_message(CHAT_ID, message)
        return "ok"
    except Exception as e:
        print("–û—à–∏–±–∫–∞ tilda_order:", e)
        db.session.rollback()
        return "error", 500

# –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î –ö–õ–ò–ï–ù–¢–ê
@bot.message_handler(commands=["start"])
def start(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìã –ú–æ–π –∑–∞–∫–∞–∑")
    kb.add("üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã")
    kb.add("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç üëã\n–Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ Nor1n Store.\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, –æ–ø–ª–∞—Ç–µ –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
        reply_markup=kb
    )

@bot.message_handler(func=lambda m: isinstance(m.text, str) and "–ú–æ–π –∑–∞–∫–∞–∑" in m.text)
def my_order(message):
    try:
        with app.app_context():
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add("üìã –ú–æ–π –∑–∞–∫–∞–∑")
            kb.add("üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã")
            kb.add("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
            username = message.from_user.username
            order = Order.query.filter_by(telegram=username).order_by(Order.id.desc()).first() if username else None
            if order:
                status_text = "‚úÖ –û–ø–ª–∞—á–µ–Ω" if order.paid else "‚åõ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
                bot.send_message(
                    message.chat.id,
                    f"–¢–≤–æ–π –∑–∞–∫–∞–∑:\n\n"
                    f"–ù–æ–º–µ—Ä: {order.order_id}\n"
                    f"{order.products}\n"
                    f"–°—É–º–º–∞: {order.amount} —Ä—É–±\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
                    f"–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤: –Ω–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É @nor1nstore_buy",
                    reply_markup=kb,
                )
            else:
                bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω üòï", reply_markup=kb)
                print("All good")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ my_order: {e}")

@bot.message_handler(func=lambda m: isinstance(m.text, str) and "–†–µ–∫–≤–∏–∑–∏—Ç—ã" in m.text and "–æ–ø–ª–∞—Ç" in m.text)
def payment_info(message):
    try:
        with app.app_context():
            username = message.from_user.username
            order = Order.query.filter_by(telegram=username).order_by(Order.id.desc()).first() if username else None
            amount_text = f"\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {order.amount} —Ä—É–±" if order else ""

            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
            kb.add("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")

            bot.send_message(
                message.chat.id,
                "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n–¢-–ë–∞–Ω–∫\n2200 7007 4343 1685\n–°–∞–≤–µ–ª–∏–π –ü." + amount_text,
                reply_markup=kb
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ payment_info: {e}")

@bot.message_handler(func=lambda m: isinstance(m.text, str) and m.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
def payment_confirmed_request(message):
    try:
        with app.app_context():
            username = message.from_user.username
            if not username:
                bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏, –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É. –£ —Ç–µ–±—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @nor1nstore_buy")
                return

            order = Order.query.filter_by(telegram=username).order_by(Order.id.desc()).first()
            if not order:
                bot.send_message(message.chat.id, "–ù–µ –Ω–∞—à–ª–∏ –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä—É: @nor1nstore_buy")
                return
            if order.paid:
                bot.send_message(message.chat.id, "–û–ø–ª–∞—Ç—É —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏. –°–ø–∞—Å–∏–±–æ!")
                return

            lead_id = order.lead_id or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"    
            crm_link = f"https://tilda.ru/projects/leads/?projectid={project_id}&id={project_id}:{lead_id}"

            keyboard = types.InlineKeyboardMarkup()
            confirm_button = types.InlineKeyboardButton(
                text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
                callback_data=f"confirm_payment:{order.id}"
            )
            keyboard.add(confirm_button)

            notify_text = (
                f"üí≥ –ö–ª–∏–µ–Ω—Ç @{username} —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ!\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.order_id}\n"
                f"–°—É–º–º–∞: {order.amount} —Ä—É–±\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ CRM: {crm_link}"
            )
            bot.send_message(int(CHAT_ID), notify_text, reply_markup=keyboard)

            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –≤–µ—Ä–Ω—ë–º—Å—è —Å –æ—Ç–≤–µ—Ç–æ–º.", reply_markup=kb)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ payment_confirmed_request: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_payment:"))
def callback_confirm_payment(call):
    try:
        order_id = int(call.data.split(":")[1])
        with app.app_context():
            order = Order.query.get(order_id)
            if not order:
                bot.answer_callback_query(call.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            if order.paid:
                bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ —É–∂–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
                return

            order.paid = True
            db.session.commit()

            if order.telegram:
                bot.send_message(
                    f"@{order.telegram}",
                    "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É! –°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
                )

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ {order.order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
            )
            bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback_confirm_payment: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.")        

@bot.message_handler(func=lambda m: isinstance(m.text, str) and "–°–≤—è–∑–∞—Ç—å—Å—è" in m.text and "–º–µ–Ω–µ–¥–∂–µ—Ä" in m.text)
def contact_manager(message):
    bot.send_message(message.chat.id, "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ —Ç—É—Ç: @nor1nstore_buy")

if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=10000)